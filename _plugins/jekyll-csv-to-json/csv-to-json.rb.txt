

 module CsvToJson
  require 'csv'
  require 'json'
  require 'yaml'
  require 'time'

  class Generator < Jekyll::Generator

    safe true
    priority :high

    # initialize config data
    def initialize(config = {})
      # no-op for default
      @csv_dir = "_csv"

    end

    def generate(site)

      base = File.join(site.source, @csv_dir )
      return unless File.directory?(base) && (!site.safe || !File.symlink?(base))

      #movement files
      movement_files = Dir.chdir(base) { Dir['movements/*.csv'] }
      movement_files.delete_if { |e| File.directory?(File.join(base, e)) }

      #place files
      place_files = Dir.chdir(base) { Dir['places/*.csv'] }
      place_files.delete_if { |e| File.directory?(File.join(base, e)) }

      # generate author
      # generate_author(site, movement_files)
      # generate countries
      generate_countries(site, place_files, movement_files)

      ## movement_files
      # movement_files.each do |entry|
      #   # path = File.join(site.source, dir, entry)
      #   # next if File.symlink?(path) && site.safe
      #
      #
      # end
      # generate_author(movement_files)

      place_files = Dir.chdir(base) { Dir['places/*.csv'] }
      place_files.delete_if { |e| File.directory?(File.join(base, e)) }

      place_files.each do |entry|
        path = File.join(site.source, @csv_dir, entry)
        next if File.symlink?(path) && site.safe

        # key = sanitize_filename(File.basename(entry, '.*')).
        file_data = CSV.read(path, :headers => true)

        data = Hash.new
        # data['content'] = file_data.to_a[1..-1]
        # data['content_hash'] = file_data.map(&:to_hash)
        # data['keys'] = file_data.headers
        # data['rows'] = data['content'].size
        # data['cols'] = file_data.headers.size

        # csv_data = Hash.new
        # csv_data[key] = data

        #raise "csv and data named \"#{entry}\""
      end

    end

    # Generate author.json
    def generate_author(site, movement_files)
      author_values = Hash.new

      movement_files.each do |entry|
        path = File.join(site.source, @csv_dir, entry)
        next if File.symlink?(path) && site.safe

        #csv file data csv
        file_data = CSV.read(path, :headers => true)

        #author_values
        author_values[ file_data.headers[1].gsub(' ', '') ] = entry.gsub('movements/', '').gsub(' - MAIN.csv', '')
      end

      path = File.join(site.source, '_data', 'author.json')
      File.write(path, pretty_print(author_values.sort.to_h.to_json))
      # raise "Generate _data/author.json"
      puts("Generate _data/author.json")
    end

    #generate countries.json
    def generate_countries(site, place_files, movement_files)

      data = Hash.new()
      data['type'] = "FeatureCollection";
      data['features'] = Hash.new([-1])


      features = Hash.new([])
      place_files.each do |entry, index|
        path = File.join(site.source, @csv_dir, entry)
        next if File.symlink?(path) && site.safe

        # key = sanitize_filename(File.basename(entry, '.*')).
        table = CSV.read(path, :headers => true)

        features = Hash.new([])

        index = 1
        table.to_a[1..-1].each do | row|

          row.each do | col |

            puts(col['Long'])

            features[index] = {
                "geometry"=> [
                  "type"=> "Point",
                  "coordinates"=> [
                    -104.9998241,
                    39.7471494
                  ]
                ],
                "type"=> "Feature",
                "properties"=> {
                  "name" => "ok"
                },
              "id"=> index
            }
          end
          index+=1
        end

      end

      # puts(features)

    end

    private
    def pretty_print(json)
      obj = JSON.parse(json)
      JSON.pretty_unparse(obj)
    end

  end
end
